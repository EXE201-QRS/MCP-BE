generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String
  name          String         @db.VarChar(500)
  password      String         @db.VarChar(500)
  phoneNumber   String         @db.VarChar(50)
  avatar        String?        @db.VarChar(1000)
  Device        Device[]
  sessionTokens SessionToken[]

  createdServicePlans  ServicePlan[]  @relation("ServicePlanCreatedBy")
  updatedServicePlans  ServicePlan[]  @relation("ServicePlanUpdatedBy")
  deletedServicePlans  ServicePlan[]  @relation("ServicePlanDeletedBy")
  createdCustomerForms CustomerForm[] @relation("CustomerFormCreatedBy")
  updatedCustomerForms CustomerForm[] @relation("CustomerFormUpdatedBy")
  deletedCustomerForms CustomerForm[] @relation("CustomerFormDeletedBy")
  createdServers       Server[]       @relation("ServerCreatedBy")
  updatedServers       Server[]       @relation("ServerUpdatedBy")
  deletedServers       Server[]       @relation("ServerDeletedBy")

  // 1 user có thể tạo ra nhiều user khác
  // 1 user chỉ có thể được tạo ra bởi 1 user khác
  // Tự quan hệ 1-n
  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")
  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model SessionToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  name      String   @db.VarChar(100)
  deviceId  Int // Foreign key tới Device
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userAgent     String
  ip            String
  lastActive    DateTime       @updatedAt // Thay updatedAt bằng lastActive cho ý nghĩa rõ hơn
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true) // Trạng thái thiết bị (đang login hay đã logout)
  sessionTokens SessionToken[]
}

model ServicePlan {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(100)
  price         Float          @default(0.0)
  description   String         @db.VarChar(500)
  durationDays  PlanDuration   @default(ONE_MONTH)
  customerForms CustomerForm[]

  createdById Int?
  createdBy   User? @relation("ServicePlanCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ServicePlanUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ServicePlanDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model CustomerForm {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  phone         String      @db.VarChar(50)
  email         String      @db.VarChar(100)
  address       String      @db.VarChar(500)
  businessName  String      @db.VarChar(100)
  note          String?     @db.VarChar(500)
  status        FormStatus  @default(PENDING)
  startDate     DateTime?
  endDate       DateTime?
  servicePlanId Int
  servicePlan   ServicePlan @relation(fields: [servicePlanId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdById Int?
  createdBy   User? @relation("CustomerFormCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CustomerFormUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CustomerFormDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Server    Server[]

  @@index([deletedAt])
}

model Server {
  id              Int          @id @default(autoincrement())
  customerFormsId Int          @unique
  customerForm    CustomerForm @relation(fields: [customerFormsId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  frontEndUrl     String?      @default("") @db.VarChar(1000)
  backEndUrl      String?      @default("") @db.VarChar(1000)
  databaseUrl     String?      @default("") @db.VarChar(1000)
  statusFrontEnd  ServerStatus @default(UNINITIALIZED)
  statusBackEnd   ServerStatus @default(UNINITIALIZED)
  statusDatabase  ServerStatus @default(UNINITIALIZED)

  createdById Int?
  createdBy   User? @relation("ServerCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ServerUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ServerDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

enum ServerStatus {
  UNINITIALIZED
  ACTIVE
  SUSPENDED
  MAINTENANCE
}

enum FormStatus {
  PENDING
  PROCESSING
  PAID
  COMPLETED
  REJECTED
}

enum PlanDuration {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
  ONE_YEAR
}
