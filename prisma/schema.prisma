generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(500)
  name          String?        @db.VarChar(500)
  password      String         @db.VarChar(500)
  roleName      Role           @default(CUSTOMER)
  phoneNumber   String?        @db.VarChar(50)
  avatar        String?        @db.VarChar(1000)
  subscriptions Subscription[]
  reviews       Review[]
  payments      Payment[]
  qosInstances  QosInstance[]

  createdServicePlans  ServicePlan[]  @relation("ServicePlanCreatedBy")
  updatedServicePlans  ServicePlan[]  @relation("ServicePlanUpdatedBy")
  deletedServicePlans  ServicePlan[]  @relation("ServicePlanDeletedBy")
  createdSubscriptions Subscription[] @relation("SubscriptionCreatedBy")
  updatedSubscriptions Subscription[] @relation("SubscriptionUpdatedBy")
  deletedSubscriptions Subscription[] @relation("SubscriptionDeletedBy")
  createdReviews       Review[]       @relation("ReviewCreatedBy")
  updatedReviews       Review[]       @relation("ReviewUpdatedBy")
  deletedReviews       Review[]       @relation("ReviewDeletedBy")
  responseReviews      Review[]       @relation("ReviewRespondedBy")
  processedPayments    Payment[]      @relation("PaymentProcessedBy")
  createdBlog          Blog[]         @relation("BlogCreatedBy")
  updatedBlog          Blog[]         @relation("BlogUpdatedBy")
  deletedBlog          Blog[]         @relation("BlogDeletedBy")
  createdQosInstance   QosInstance[]  @relation("QosInstanceCreatedBy")
  updatedQosInstance   QosInstance[]  @relation("QosInstanceUpdatedBy")
  deletedQosInstance   QosInstance[]  @relation("QosInstanceDeletedBy")

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")
  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, code, type])
  @@index([expiresAt])
}

model ServicePlan {
  id          Int     @id @default(autoincrement())
  name        String  @unique // Basic, Professional, Enterprise
  description String? // Mô tả ngắn: "Phù hợp cho nhà hàng nhỏ", etc.
  price       Float   @default(0.0) // VND/tháng

  subscriptions Subscription[]

  createdById Int?
  createdBy   User? @relation("ServicePlanCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ServicePlanUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ServicePlanDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Subscription {
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurantName    String  @db.VarChar(500)
  restaurantAddress String  @db.VarChar(1000)
  restaurantPhone   String  @db.VarChar(15)
  restaurantType    String  @db.VarChar(200) // fast food, fine dining, etc.
  description       String? @db.VarChar(1000) // Mô tả ngắn về nhà hàng

  servicePlanId Int
  servicePlan   ServicePlan  @relation(fields: [servicePlanId], references: [id], onDelete: Cascade)
  durationDays  DurationDays @default(ONE_MONTH) // Số ngày của gói dịch vụ, ví dụ: 30, 90, 365

  startDate DateTime?
  endDate   DateTime?
  status    SubscriptionStatus @default(PENDING) // Trạng thái: PENDING, PAID, ACTIVE, EXPIRED, CANCELLED

  reviews     Review[]
  payments    Payment[]
  qosInstance QosInstance?

  // Audit fields
  createdById Int?
  createdBy   User? @relation("SubscriptionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("SubscriptionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById Int?
  deletedBy   User? @relation("SubscriptionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@index([deletedAt])
}

model Payment {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: NoAction)

  paymentMethod PaymentMethod
  amount        Float         @default(0.0) // Số tiền thanh toán
  status        PaymentStatus @default(PENDING)

  // PayOS specific fields
  payosOrderId       String? @unique @db.VarChar(500) // PayOS order ID
  payosPaymentLinkId String? @db.VarChar(500) // PayOS payment link ID
  payosTransactionId String? @db.VarChar(500) // PayOS transaction ID
  payosQrCode        String? @db.Text // PayOS QR code
  payosCheckoutUrl   String? @db.VarChar(1000) // PayOS checkout URL

  // Cash payment fields
  receivedAmount Float? // Số tiền nhận được (cash)
  changeAmount   Float? // Số tiền thối lại (cash)

  // Payment gateway response
  gatewayResponse Json? // Raw response từ PayOS
  failureReason   String? @db.VarChar(1000) // Lý do thất bại

  // Timestamps
  paidAt    DateTime? // Thời gian thanh toán thành công
  expiredAt DateTime? // Thời gian hết hạn (PayOS)

  // Audit fields
  processedById Int?
  processedBy   User? @relation("PaymentProcessedBy", fields: [processedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([subscriptionId])
  @@index([status])
  @@index([paymentMethod])
  @@index([payosOrderId])
  @@index([deletedAt])
}

model Review {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  rating    Int          @default(5) // 1-5 stars
  content   String       @db.VarChar(1000)
  status    ReviewStatus @default(PENDING) // PENDING, APPROVED, REJECTED
  isPublic  Boolean      @default(false)
  reviewFor ReviewFor    @default(SERVICE) // SERVICE, PLATFORM

  // Admin response
  adminResponse String? @db.VarChar(1000)

  responsedAt   DateTime?
  responsedById Int?
  responsedBy   User?     @relation("ReviewRespondedBy", fields: [responsedById], references: [id], onDelete: SetNull)

  // Audit fields
  createdById Int?
  createdBy   User? @relation("ReviewCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("ReviewUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById Int?
  deletedBy   User? @relation("ReviewDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
}

model Blog {
  id      Int     @id @default(autoincrement())
  title   String  @db.VarChar(500)
  slug    String  @unique @db.VarChar(500)
  content String  @db.Text
  excerpt String? @db.VarChar(1000)

  // SEO
  metaTitle       String? @db.VarChar(500)
  metaDescription String? @db.VarChar(1000)
  keywords        String? @db.VarChar(500)

  // Media - SỬ DỤNG MEDIA SYSTEM CÓ SẴN
  featuredImage String?  @db.VarChar(1000) // S3 URL từ media upload
  images        String[] // Additional S3 URLs

  // Publishing
  status      BlogStatus @default(DRAFT)
  publishedAt DateTime?

  // Categories
  category String?  @db.VarChar(200)
  tags     String[] // Array of tags

  // Engagement
  views Int @default(0)
  likes Int @default(0)

  // Audit fields - TƯƠNG TỰ CÁC MODEL KHÁC
  createdById Int?
  createdBy   User? @relation("BlogCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("BlogUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById Int?
  deletedBy   User? @relation("BlogDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([category])
  @@index([deletedAt])
}

model QosInstance {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  subscriptionId Int          @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  dbUrl    String?           @db.VarChar(1000)
  statusDb QosInstanceStatus @default(INACTIVE)

  frontEndUrl String?           @db.VarChar(1000)
  statusFE    QosInstanceStatus @default(INACTIVE)

  backEndUrl String?           @db.VarChar(1000)
  statusBE   QosInstanceStatus @default(INACTIVE)

  // Technical info
  serverInfo String? // server specs, location, etc.
  dbSize     Float?    @default(0.0) // MB
  lastBackup DateTime?

  // Health monitoring
  lastPing     DateTime?
  responseTime Float?    @default(0.0) // ms
  uptime       Float?    @default(0.0) // percentage

  // Deployment info
  version    String?   @db.VarChar(50)
  deployedAt DateTime?

  // Audit fields
  createdById Int?
  createdBy   User? @relation("QosInstanceCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  updatedById Int?
  updatedBy   User? @relation("QosInstanceUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  deletedById Int?
  deletedBy   User? @relation("QosInstanceDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  ADMIN_SYSTEM
  CUSTOMER
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
}

enum SubscriptionStatus {
  PENDING
  PAID
  ACTIVE
  EXPIRED
  CANCELLED
}

enum DurationDays {
  ONE_MONTH
  THREE_MONTHS
  SIX_MONTHS
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReviewFor {
  SERVICE
  PLATFORM
}

enum PaymentMethod {
  BANK_TRANSFER // Chuyển khoản ngân hàng (PayOS)
}

enum PaymentStatus {
  PENDING // Đang chờ thanh toán
  PROCESSING // Đang xử lý
  PAID // Đã thanh toán thành công
  FAILED // Thanh toán thất bại
  CANCELLED // Đã hủy
  EXPIRED // Đã hết hạn
  REFUNDED // Đã hoàn tiền
}

enum QosInstanceStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEPLOYING
  ERROR
}
